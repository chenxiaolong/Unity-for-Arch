Reverts:
------------------------------------------------------------
revno: 161 [merge]
author: Charles Kerr <charles.kerr@canonical.com>
committer: Tarmac
branch nick: trunk.13.04
timestamp: Thu 2013-01-17 23:01:37 +0000
message:
  g_type_init() is deprecated as of glib 2.35.4, so bump our glib minimum requirement and remove the g_type_init() call.
  
  Approved by PS Jenkins bot.
------------------------------------------------------------
=== modified file 'configure.ac'
--- configure.ac	2013-01-17 21:07:08 +0000
+++ configure.ac	2012-11-16 12:21:47 +0000
@@ -29,7 +29,7 @@
 ###########################
 # Dependencies
 ###########################
-GLIB_REQUIRED_VERSION=2.35.4
+GLIB_REQUIRED_VERSION=2.33
 GIO_REQUIRED_VERSION=2.26
 GTK_REQUIRED_VERSION=3.0
 INDICATOR_REQUIRED_VERSION=0.3.90

=== modified file 'tests/test-dbus-listener.cc'
--- tests/test-dbus-listener.cc	2013-01-17 21:07:08 +0000
+++ tests/test-dbus-listener.cc	2012-05-29 22:28:15 +0000
@@ -26,6 +26,24 @@
 ****
 ***/
 
+namespace
+{
+  void ensure_glib_initialized ()
+  {
+    static bool initialized = false;
+
+    if (G_UNLIKELY(!initialized))
+    {
+      initialized = true;
+      g_type_init();
+    }
+  }
+}
+
+/***
+****
+***/
+
 class DbusListenerTest : public ::testing::Test
 {
   protected:
@@ -120,6 +138,7 @@
       gsd_power_error_string = NULL;
 
       // bring up the test bus
+      ensure_glib_initialized ();
       mainloop =  g_main_loop_new (NULL, FALSE);
       bus = g_test_dbus_new (G_TEST_DBUS_NONE);
       g_test_dbus_up (bus);

=== modified file 'tests/test-device.cc'
--- tests/test-device.cc	2013-01-17 21:07:08 +0000
+++ tests/test-device.cc	2012-11-16 17:58:24 +0000
@@ -21,6 +21,20 @@
 #include "device.h"
 #include "indicator-power.h"
 
+namespace
+{
+  void ensure_glib_initialized ()
+  {
+    static bool initialized = false;
+
+    if (G_UNLIKELY(!initialized))
+    {
+      initialized = true;
+      g_type_init();
+    }
+  }
+}
+
 class DeviceTest : public ::testing::Test
 {
   private:
@@ -49,6 +63,8 @@
       log_handler_id = g_log_set_handler ("Indicator-Power", flags, log_count_func, this);
       log_count_ipower_expected = 0;
       log_count_ipower_actual = 0;
+
+      ensure_glib_initialized ();
     }
 
     virtual void TearDown()
@@ -95,6 +111,8 @@
 
 TEST_F(DeviceTest, GObjectNew)
 {
+  ensure_glib_initialized ();
+
   GObject * o = G_OBJECT (g_object_new (INDICATOR_POWER_DEVICE_TYPE, NULL));
   ASSERT_TRUE (o != NULL);
   ASSERT_TRUE (INDICATOR_IS_POWER_DEVICE(o));
@@ -111,6 +129,8 @@
   guint64 u64;
   const gchar * key;
 
+  ensure_glib_initialized ();
+
   o = G_OBJECT (g_object_new (INDICATOR_POWER_DEVICE_TYPE, NULL));
   ASSERT_TRUE (o != NULL);
   ASSERT_TRUE (INDICATOR_IS_POWER_DEVICE(o));
@@ -154,6 +174,8 @@
 
 TEST_F(DeviceTest, New)
 {
+  ensure_glib_initialized ();
+
   IndicatorPowerDevice * device = indicator_power_device_new ("/object/path",
                                                               UP_DEVICE_KIND_BATTERY,
                                                               50.0,
@@ -173,6 +195,8 @@
 
 TEST_F(DeviceTest, NewFromVariant)
 {
+  ensure_glib_initialized ();
+
   GVariant * variant = g_variant_new ("(susdut)",
                                       "/object/path",
                                       (guint32) UP_DEVICE_KIND_BATTERY,
@@ -197,6 +221,8 @@
 
 TEST_F(DeviceTest, BadAccessors)
 {
+  ensure_glib_initialized ();
+
   // test that these functions can handle being passed NULL pointers
   IndicatorPowerDevice * device = NULL;
   indicator_power_device_get_kind (device);

=== modified file 'tests/test-indicator.cc'
--- tests/test-indicator.cc	2013-01-17 21:07:08 +0000
+++ tests/test-indicator.cc	2012-10-26 07:14:11 +0000
@@ -46,6 +46,7 @@
     if (G_UNLIKELY(!initialized))
     {
       initialized = true;
+      g_type_init();
       g_log_set_handler ("Gtk", (GLogLevelFlags)(G_LOG_LEVEL_CRITICAL|G_LOG_LEVEL_WARNING), quiet_log_func, NULL);
       g_log_set_handler ("GLib-GObject", (GLogLevelFlags)(G_LOG_LEVEL_CRITICAL|G_LOG_LEVEL_WARNING), quiet_log_func, NULL);
     }

